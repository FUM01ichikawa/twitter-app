{"version":3,"sources":["components/CardComponent.js","components/TweetList.js","App.js","registerServiceWorker.js","index.js"],"names":["CardComponent","data","this","props","react_default","a","createElement","className","src","user","profile_image_url","alt","name","text","Date","created_at","toLocaleTimeString","href","concat","screen_name","target","React","Component","TweetList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","items","searchTerm","handleChange","bind","assertThisInitialized","handleKeyPress","handleResume","handlePause","event","setState","value","key","term","fetch","method","headers","Content-Type","body","JSON","stringify","_this2","socket","socketIOClient","on","console","log","info","newList","slice","off","removeAllListeners","itemsCards","CSSTransition","classNames","timeout","enter","exit","map","x","i","components_CardComponent","searchControls","id","type","onKeyPress","onChange","htmlFor","filterControls","style","controlStyle","onClick","controls","length","loading","marginRight","App","components_TweetList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yTA+BeA,mLA3BP,IAAIC,EAAOC,KAAKC,MAAMF,KAEtB,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAKQ,KAAKC,kBAAmBC,IAAKV,EAAKQ,KAAKG,KAAML,UAAU,2BAE1EH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcN,EAAKY,QAI3CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACd,IAAIO,KAAKb,EAAKc,YAAYC,sBAE3BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAAA,KAAGW,KAAI,uBAAAC,OAAyBjB,EAAKQ,KAAKU,aAAeC,OAAO,KAAhE,IAAAF,OAAyEjB,EAAKQ,KAAKU,wBApB/EE,IAAMC,WCI5BC,cACJ,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3B,KAAMC,KACD2B,MAAQ,CAAEC,MAAO,GAAIC,WAAY,cAEtCR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,eAAiBZ,EAAKY,eAAeF,KAApBT,OAAAU,EAAA,EAAAV,CAAAD,IACtBA,EAAKa,aAAeb,EAAKa,aAAaH,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKc,YAAcd,EAAKc,YAAYJ,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IAPFA,4EAUNe,GACXrC,KAAKsC,SAAS,CAAER,WAAYO,EAAMnB,OAAOqB,+CAG5BF,GACK,UAAdA,EAAMG,KACRxC,KAAKmC,sDAKP,IAAIM,EAAOzC,KAAK4B,MAAME,WACtBY,MAAM,iBACJ,CACEC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEP,+CAIjBJ,GACVK,MAAM,SACJ,CACEC,OAAQ,OACRC,QAAS,CACPC,eAAgB,kEAKN,IAAAI,EAAAjD,KACZkD,EAASC,IAAe,0BAE9BD,EAAOE,GAAG,UAAW,WACnBC,QAAQC,IAAI,oBACZJ,EAAOE,GAAG,SAAU,SAAArD,GAClBsD,QAAQE,KAAKxD,GACb,IAAIyD,EAAU,CAACzD,GAAMiB,OAAOiC,EAAKrB,MAAMC,MAAM4B,MAAM,EAAG,KACtDR,EAAKX,SAAS,CAAET,MAAO2B,QAG3BN,EAAOE,GAAG,aAAc,WACtBF,EAAOQ,IAAI,UACXR,EAAOS,mBAAmB,UAC1BN,QAAQC,IAAI,0DAMZ,IAAIzB,EAAQ7B,KAAK4B,MAAMC,MAEnB+B,EAAa1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CACfC,WAAW,UACXC,QAAW,CAACC,MAAM,IAAIC,KAAK,MAE1BpC,EAAMqC,IAAI,SAACC,EAAGC,GAAJ,OACTlE,EAAAC,EAAAC,cAACiE,EAAD,CAAe7B,IAAK4B,EAAGrE,KAAMoE,OAI7BG,EACFpE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOmE,GAAG,QAAQC,KAAK,OAAOnE,UAAU,WAAWkC,MAAOvC,KAAK4B,MAAME,WAAY2C,WAAYzE,KAAKkC,eAAgBwC,SAAU1E,KAAK+B,eACjI7B,EAAAC,EAAAC,cAAA,SAAOuE,QAAQ,SAAf,WAGAC,EAAiB1E,EAAAC,EAAAC,cAAA,WACnBF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gEAAgEwE,MAAOC,EAAcC,QAAS/E,KAAKmC,cAAcjC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,eACnIH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gEAAgE0E,QAAS/E,KAAKoC,aAAclC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,UAC9GH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAOoE,KAAK,WAAWD,GAAG,UAC1BrE,EAAAC,EAAAC,cAAA,SAAOuE,QAAQ,SAAf,cAIAK,EAAW9E,EAAAC,EAAAC,cAAA,WAEXyB,EAAMoD,OAAS,EAAIL,EAAiB,MAIpCM,EAAUhF,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,wBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCAInB,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACZiE,EAECzC,EAAMoD,OAAS,EAAID,EAAW,OAIpC9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,WAEIyB,EAAMoD,OAAS,EAAIrB,EAAasB,IAMtChF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAzHCc,IAAMC,WAgIxB0D,EAAe,CACnBK,YAAa,OAGA9D,IC1HA+D,mLARX,OACElF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiF,EAAD,cAJUjE,aCIZkE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxE,QACfkE,UAAUC,cAAcQ,WAK1BlD,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBkD,MAAM,SAAAC,GACLpD,QAAQoD,MAAM,4CAA6CA,KCnEjEC,IAASC,OAAOzG,EAAAC,EAAAC,cAACwG,EAAD,MAASC,SAASC,eAAe,SDQlC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAA7E,OAAMgG,GAAN,sBAEP1B,GAiDV,SAAiCO,GAE/BnD,MAAMmD,GACHI,KAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASvE,QAAQyE,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAMtB,KAAK,SAAAC,GACjCA,EAAasB,aAAavB,KAAK,WAC7BT,OAAOC,SAASgC,aAKpB7B,EAAgBC,KAGnBW,MAAM,WACLnD,QAAQC,IACN,mEArEAoE,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAMtB,KAAK,WACjC5C,QAAQC,IACN,+GAMJsC,EAAgBC,MCnCxB8B","file":"static/js/main.73e74462.chunk.js","sourcesContent":["import React from 'react';\n\nclass CardComponent extends React.Component {\n    render() {\n        let data = this.props.data;\n\n        return (\n            <div>\n                <div className=\"card-panel grey lighten-5 z-depth-3 hoverable thin\">\n                    <div className=\"row valign-wrapper\">\n                        <div className=\"col s2\">\n                            <img src={data.user.profile_image_url} alt={data.user.name} className=\"circle responsive-img\" />\n                        </div>\n                        <div className=\"col s10 left-align\">\n                            <span className=\"black-text\">{data.text}</span>\n                        </div>\n                        \n                    </div>\n                    <div className=\"row valign-wrapper right-align chip hoverable\">\n                    {new Date(data.created_at).toLocaleTimeString()}\n                    </div>\n                    <div className=\"row valign-wrapper right-align chip hoverable\">\n                        <a href={`https://twitter.com/${data.user.screen_name}`} target=\"#\">{`@${data.user.screen_name}`}</a>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default CardComponent;","import React from 'react';\nimport { CSSTransition } from \"react-transition-group\";\nimport socketIOClient from \"socket.io-client\";\nimport CardComponent from './CardComponent';\n\n\nclass TweetList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], searchTerm: \"JavaScript\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleResume = this.handleResume.bind(this);\n    this.handlePause = this.handlePause.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.handleResume();\n    }\n  }\n\n  handleResume() {\n    let term = this.state.searchTerm;\n    fetch(\"/setSearchTerm\",\n      {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ term })\n      })\n  }\n\n  handlePause(event) {\n    fetch(\"/pause\",\n      {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n  }\n\ncomponentDidMount() {\n  const socket = socketIOClient('http://localhost:3000/');\n\n  socket.on('connect', () => {\n    console.log(\"Socket Connected\");\n    socket.on(\"tweets\", data => {\n      console.info(data);\n      let newList = [data].concat(this.state.items.slice(0, 15));\n      this.setState({ items: newList });\n    });\n  });\n  socket.on('disconnect', () => {\n    socket.off(\"tweets\")\n    socket.removeAllListeners(\"tweets\");\n    console.log(\"Socket Disconnected\");\n  });\n}\n\n\n  render() {\n    let items = this.state.items;\n\n    let itemsCards = <CSSTransition\n      classNames=\"example\"\n      timeout = {{enter:500,exit:300}}\n      >\n      {items.map((x, i) =>\n        <CardComponent key={i} data={x} />\n      )}\n    </CSSTransition>;\n\n    let searchControls =\n      <div>\n        <input id=\"email\" type=\"text\" className=\"validate\" value={this.state.searchTerm} onKeyPress={this.handleKeyPress} onChange={this.handleChange} />\n        <label htmlFor=\"email\">Search</label>\n      </div>\n\n    let filterControls = <div>\n      <button className=\"btn-floating btn-small waves-effect waves-light pink accent-2\" style={controlStyle} onClick={this.handleResume}><i className=\"material-icons\">play_arrow</i></button>\n      <button className=\"btn-floating btn-small waves-effect waves-light pink accent-2\" onClick={this.handlePause} ><i className=\"material-icons\">pause</i></button>\n      <p>\n        <input type=\"checkbox\" id=\"test5\" />\n        <label htmlFor=\"test5\">Retweets</label>\n      </p>\n    </div>\n\n    let controls = <div>\n      {\n        items.length > 0 ? filterControls : null\n      }\n    </div>\n\n    let loading = <div>\n      <p className=\"flow-text\">Listening to Streams</p>\n      <div className=\"progress lime lighten-3\">\n        <div className=\"indeterminate pink accent-1\"></div>\n      </div>\n    </div>\n\n    return (\n      <div className=\"row\">\n        <div className=\"col s12 m4 l4\">\n          <div className=\"input-field col s12\">\n            {searchControls}\n            {\n              items.length > 0 ? controls : null\n            }\n          </div>\n        </div>\n        <div className=\"col s12 m4 l4\">\n          <div>\n            {\n              items.length > 0 ? itemsCards : loading\n            }\n\n          </div>\n\n        </div>\n        <div className=\"col s12 m4 l4\">\n        </div>\n      </div>\n    );\n  }\n}\n\nconst controlStyle = {\n  marginRight: \"5px\"\n};\n\nexport default TweetList;","import React, { Component } from 'react';\n//import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport TweetList from './components/TweetList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">        \n        <TweetList/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n//import * as serviceWorker from './serviceWorker';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}